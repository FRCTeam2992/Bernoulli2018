
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.CubeBert2018;

import org.usfirst.frc2992.CubeBert2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc2992.CubeBert2018.mhJoystick;
import org.usfirst.frc2992.CubeBert2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  
    public JoystickButton intakeFeedInBtn;
    public JoystickButton intakeFeedOutBtn;
    public JoystickButton intakeDeployBtn;
    public JoystickButton intakeArmOpenBtn;
    public JoystickButton intakeArmsClosed;
    
    public JoystickButton liftCubeUpBtn;
    public JoystickButton liftCubeDownBtn;
    public JoystickButton groundLevelBtn;
    public JoystickButton switchLevelBtn;
    public JoystickButton scaleLevelBtn;
    public JoystickButton climbingPosBtn;//lifts to climbing height
    
    public JoystickButton lowClimbSpeedBtn;
    public JoystickButton highClimbSpeedBtn;
    public JoystickButton scaleClampBtn;
    public JoystickButton rampDeployBtn;//deploy both ramps
 
    public JoystickButton autoA;
    public JoystickButton autoB;
    public JoystickButton autoC;
    public JoystickButton autoD;
    
    public Joystick buttonBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public mhJoystick rightJoy;
    public mhJoystick leftJoy;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonBox = new Joystick(2);
        
        autoD = new JoystickButton(buttonBox, 19);
        
        autoC = new JoystickButton(buttonBox, 18);
        
        autoB = new JoystickButton(buttonBox, 17);
        
        autoA = new JoystickButton(buttonBox, 16);
        
        scaleClampBtn = new JoystickButton(buttonBox, 14);
        scaleClampBtn.whenPressed(new ScaleClampDeploy(true));
        
        highClimbSpeedBtn = new JoystickButton(buttonBox, 13);
        highClimbSpeedBtn.whenPressed(new climbStart(0.6));
        highClimbSpeedBtn.whenReleased(new climbStop());
        
        lowClimbSpeedBtn = new JoystickButton(buttonBox, 12);
        lowClimbSpeedBtn.whenPressed(new climbStart(0.3));
        lowClimbSpeedBtn.whenReleased(new climbStop());
        
        climbingPosBtn = new JoystickButton(buttonBox, 11);
        climbingPosBtn.whenPressed(new liftHeight(25.0, 4.0));//liftHeight(dist,time) 
        
        scaleLevelBtn = new JoystickButton(buttonBox, 10);
        //the dist is how high the first stage of the lift is gonna go-actually twice the height bc 2 stages away
        scaleLevelBtn.whenPressed(new liftHeight(30.0, 4.0));//dist actually 60 in
        
        switchLevelBtn = new JoystickButton(buttonBox, 9);
        switchLevelBtn.whenPressed(new liftHeight(8.0, 4.0));//dist actually 16 in
        
        groundLevelBtn = new JoystickButton(buttonBox, 8);
        groundLevelBtn.whenPressed(new liftHeight(0.0, 4.0));
        
        liftCubeDownBtn = new JoystickButton(buttonBox, 7);
        liftCubeDownBtn.whileHeld(new liftDown(0.3));
        liftCubeDownBtn.whenReleased(new liftStop());
        
        intakeArmsClosed = new JoystickButton(buttonBox, 5);
        intakeArmsClosed.whenPressed(new intakeArmsOpen(false));
        
        intakeArmOpenBtn = new JoystickButton(buttonBox, 4);
        intakeArmOpenBtn.whenPressed(new intakeArmsOpen(true));
        
        intakeDeployBtn = new JoystickButton(buttonBox, 3);
        intakeDeployBtn.whenPressed(new intakeDeployed(false));
        intakeDeployBtn.whenReleased(new intakeDeployed(true));
        
        intakeFeedOutBtn = new JoystickButton(buttonBox, 2);
        intakeFeedOutBtn.whileHeld(new intakeOut(0.5));
        intakeFeedOutBtn.whenReleased(new intakeStop());
        
        intakeFeedInBtn = new JoystickButton(buttonBox, 1);
        intakeFeedInBtn.whileHeld(new intakeIn(0.5));//whileHeld in case commands get out of order (race condition)
        intakeFeedInBtn.whenReleased(new intakeStop());
        
        liftCubeUpBtn = new JoystickButton(buttonBox, 6);
        liftCubeUpBtn.whileHeld(new liftUp(0.5));
        liftCubeUpBtn.whenReleased(new liftStop());
        
        rampDeployBtn = new JoystickButton(buttonBox,15);
        rampDeployBtn.whenPressed(new rampDeploy(true));
        
        leftJoy = new mhJoystick(1);
        
        rightJoy = new mhJoystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("driveSticks", new driveSticks());
        SmartDashboard.putData("intakeIn", new intakeIn(0.5));
        SmartDashboard.putData("intakeStop", new intakeStop());
        SmartDashboard.putData("intakeOut", new intakeOut(0.5));
        SmartDashboard.putData("liftUp", new liftUp(0.5));
        SmartDashboard.putData("liftDown", new liftDown(0.5));
        SmartDashboard.putData("liftStop", new liftStop());
        SmartDashboard.putData("climbStart", new climbStart(0.5));
        SmartDashboard.putData("climbStop", new climbStop());
        SmartDashboard.putData("intakeDeployed", new intakeDeployed(false));
        SmartDashboard.putData("intakeArmsOpen", new intakeArmsOpen(false));
        SmartDashboard.putData("driveAutoFwd", new AutoDriveFwd(0.5,0.5,0.5,false,0.5));
        SmartDashboard.putData("driveAutoTurn", new AutoDriveTurn(0.5,0.5,0.5));
        SmartDashboard.putData("scaleClampDeploy", new ScaleClampDeploy(false));
        SmartDashboard.putData("liftHeight", new liftHeight(10.0, 4.0));
        SmartDashboard.putData("autoHighGear", new autoHighGear(false));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
    }

    public mhJoystick getrightJoy() {
        return rightJoy;
    }

    public mhJoystick getleftJoy() {
        return leftJoy;
    }
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    public Joystick getbuttonBox() {
        return buttonBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


