// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.CubeBert2018;

import org.usfirst.frc2992.CubeBert2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc2992.CubeBert2018.mhJoystick;
import org.usfirst.frc2992.CubeBert2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick rightJoy;
    public Joystick leftJoy;
    public Joystick buttonBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public mhJoystick rightJoy;
    public mhJoystick leftJoy;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonBox = new Joystick(2);
        
        leftJoy = new Joystick(1);
        
        rightJoy = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("driveSticks", new driveSticks());
        SmartDashboard.putData("intakeIn", new intakeIn());
        SmartDashboard.putData("intakeStop", new intakeStop());
        SmartDashboard.putData("intakeOut", new intakeOut());
        SmartDashboard.putData("liftUp", new liftUp());
        SmartDashboard.putData("liftDown", new liftDown());
        SmartDashboard.putData("liftStop", new liftStop());
        SmartDashboard.putData("climbStart", new climbStart());
        SmartDashboard.putData("climbStop", new climbStop());
        SmartDashboard.putData("intakeDeployed", new intakeDeployed());
        SmartDashboard.putData("intakeArmsOpen", new intakeArmsOpen());
        SmartDashboard.putData("driveAutoFwd", new driveAutoFwd());
        SmartDashboard.putData("driveAutoTurn", new driveAutoTurn());
        SmartDashboard.putData("leftScaleClampDeploy", new leftScaleClampDeploy());
        SmartDashboard.putData("rightScaleClampDeploy", new rightScaleClampDeploy());
        SmartDashboard.putData("liftHeight", new liftHeight());
        SmartDashboard.putData("autoHighGear", new autoHighGear());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        leftJoy = new mhJoystick(1);
        rightJoy = new mhJoystick(0);
        
    }

    public mhJoystick getrightJoy() {
        return rightJoy;
    }

    public mhJoystick getleftJoy() {
        return leftJoy;
    }
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getrightJoy() {
        return rightJoy;
    }

    public Joystick getleftJoy() {
        return leftJoy;
    }

    public Joystick getbuttonBox() {
        return buttonBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

